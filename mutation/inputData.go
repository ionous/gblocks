package mutation

import (
	"github.com/ionous/gblocks/block"
)

// b/c we cant extend the existing set of blockly input types
// we overlap the blocks with our own mutation data
type inputData struct {
	mutableInput block.Type  // name of the mutation for the input
	atoms        []*atomData // current list of atoms
	totalInputs  int         // number of dynamic inputs
}

type atomData struct {
	typeName  block.Type
	numInputs int
}

// resetAtoms - delete all tracking info about inputs generated by this mutation.
// Returns the previous total inputs.
func (in *inputData) resetAtoms() (ret int) {
	ret, in.totalInputs = in.totalInputs, 0
	in.atoms = nil
	return ret
}

func (in *inputData) store(atomType block.Type, numInputs int) {
	in.atoms = append(in.atoms, &atomData{atomType, numInputs})
	in.totalInputs += numInputs
}
